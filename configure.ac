AM_PATH_PYTHON([3])

#--enable-verrou-fma
AC_CACHE_CHECK([verrou fma], vg_cv_verrou_fma,
  [AC_ARG_ENABLE(verrou-fma,
    [  --enable-verrou-fma          enables verrou to use fma],
    [vg_cv_verrou_fma=$enableval],
    [vg_cv_verrou_fma=yes])])

if test "$vg_cv_verrou_fma" = yes; then
  # Check for fmaintrin.h
  AC_LANG_PUSH(C++)
  CXXFLAGS="$safe_CXXFLAGS -mfma"
  AC_MSG_CHECKING([for fmaintrin.h ])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
      #include  <immintrin.h>
      #include <stdlib.h>
]], [[
       double a,b,c,d;
      __m128d ai, bi,ci,di;
      ai = _mm_load_sd(&a);
      bi = _mm_load_sd(&b);
      ci = _mm_load_sd(&c);
      di=_mm_fmadd_sd(ai,bi,ci);
      d=_mm_cvtsd_f64(di);
      return EXIT_SUCCESS;
    ]])],
    [
      AC_MSG_RESULT([yes])
      AM_CONDITIONAL([HAVE_FMA_INTRIN], test x$vg_cv_verrou_fma = xyes,[])
    ],[
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([A compiler with fmaintrin.h is required for --enable-verrou-fma ])
  ])
  AC_LANG_POP(C++)
else
  AM_CONDITIONAL([HAVE_FMA_INTRIN], test x$vg_cv_verrou_fma = xyes,[])
fi

AC_SUBST(vg_cv_verrou_fma)


#--enable-verrou-quad
AC_CACHE_CHECK([verrou quad], vg_cv_verrou_quad,
  [AC_ARG_ENABLE(verrou-quad,
    [  --enable-verrou-quad          enables verrou to use quad],
    [vg_cv_verrou_quad=$enableval],
    [vg_cv_verrou_quad=yes])])

AM_CONDITIONAL([USE_QUAD], test x$vg_cv_verrou_quad = xyes,[])

AC_SUBST(vg_cv_verrou_quad)

#--enable-profiling for exact operation
AC_CACHE_CHECK([verrou profiling exact], vg_cv_verrou_profiling_exact,
  [AC_ARG_ENABLE(verrou-profiling-exact,
    [  --enable-verrou-profiling-exact          enables profiling of exact operation],
    [vg_cv_verrou_profiling_exact=$enableval],
    [vg_cv_verrou_profiling_exact=no])])

AM_CONDITIONAL([USE_PROFILING_EXACT], test x$vg_cv_verrou_profiling_exact = xyes,[])
AC_SUBST(vg_cv_verrou_profiling_exact)


#--enable-xoshiro
AC_CACHE_CHECK([verrou xoshiro prng], vg_cv_verrou_xoshiro,
  [AC_ARG_ENABLE(verrou-xoshiro,
    [  --enable-verrou-xoshiro          enables xoshiro prng for random and average rounding mode],
    [vg_cv_verrou_xoshiro=$enableval],
    [vg_cv_verrou_xoshiro=yes])])

AM_CONDITIONAL([USE_XOSHIRO], test x$vg_cv_verrou_xoshiro = xyes,[])
AC_SUBST(vg_cv_verrou_xoshiro)


#--enable-verrou-checknaninf
AC_CACHE_CHECK([verrou check nan inf], vg_cv_verrou_naninf,
  [AC_ARG_ENABLE(verrou-check-naninf,
    [  --enable-verrou-check-naninf          enables verrou check for nan and inf],
    [vg_cv_verrou_naninf=$enableval],
    [vg_cv_verrou_naninf=yes])])

AM_CONDITIONAL([USE_VERROU_NANINF], test x$vg_cv_verrou_naninf = xyes,[])
AC_SUBST(vg_cv_verrou_naninf)


AC_ARG_VAR(VERROU_NUM_AVG,[Number of AVG rounding per 64bit generated by mersenne twister or xoshiro])
AS_VAR_SET_IF([VERROU_NUM_AVG], [],[VERROU_NUM_AVG=1])

AS_CASE([$VERROU_NUM_AVG],
	[1],[],
	[2],[],
	[3],[],
	[4],[],
	[8],[],
	[*],[AC_MSG_ERROR(["invalid VERROU_NUM_AVG", $VERROU_NUM_AVG])]
)



AC_CACHE_CHECK([verrou-det-hash], vg_cv_verrou_det_hash,
[
AC_ARG_WITH(
	[verrou-det-hash],
	[  --with-verrou-det-hash=hash_name	hash algorithm for random_[com]det and average_[com]det: dietzfelbinger,multiply_shift,double_tabulation,mersenne_twister],
	[vg_cv_verrou_det_hash=$withval],
	[vg_cv_verrou_det_hash=double_tabulation]
)])

AS_CASE([$vg_cv_verrou_det_hash],
	[yes],[vg_cv_verrou_det_hash=double_tabulation],
	[dietzfelbinger],[echo "dietzfelbinger hash selected"],
	[multiply_shift],[echo "multiply_shift hash selected"],
	[double_tabulation],[echo "double_tabulation hash selected"],
	[mersenne_twister],[echo "mersenne_twister hash selected"],
	[*],[AC_MSG_ERROR(["invalid --with-verrou-det-hash : ", $vg_cv_verrou_det_hash])])

AC_SUBST(vg_cv_verrou_det_hash)

# avx512
vg_test_no_avx512f_flag=-mno-avx512f
AC_LANG_PUSH(C++)
CXXFLAGS="$safe_CXXFLAGS $vg_test_no_avx512f_flag"
AC_MSG_CHECKING([for -mno-avx512f compil option])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
      #include <stdlib.h>
      ]], [[return EXIT_SUCCESS;]])],
    [
      CXXFLAGS="$safe_CXXFLAGS"
      AC_MSG_RESULT([yes])
    ],[
    CXXFLAGS="$safe_CXXFLAGS"
     vg_test_no_avx512f_flag=
      AC_MSG_RESULT([no])
  ])
AC_LANG_POP(C++)
AC_SUBST(vg_test_no_avx512f_flag)


AC_CONFIG_FILES([verrou/env.sh])
AC_CONFIG_FILES([verrou/unitTest/flag.mk])
