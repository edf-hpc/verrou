<?xml version="1.0"?> <!-- -*- sgml -*- -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<section id="vr-manual.feat" xreflabel="Features">
  <title>Standard features</title>

  <section id="vr-manual.feat.count" xreflabel="Floating-point instructions counting">
    <title>Floating-point instructions counting</title>
    <para>
      Verrou detects and counts floating-point operations. A summary is printed after each program
      execution, listing the number of floating-point operations executed by the program, broken
      down into categories according to various criteria :
    </para>
    <variablelist>
      <varlistentry>
        <term><command>Operation type:</command></term>
        <listitem><para>
            <itemizedlist>
              <listitem><simpara><command>add</command>: addition</simpara></listitem>
              <listitem><simpara><command>sub</command>: subtraction</simpara></listitem>
              <listitem><simpara><command>mul</command>: multiplication</simpara></listitem>
              <listitem><simpara><command>div</command>: division</simpara></listitem>
              <listitem><simpara><command>mAdd</command>: Fused Multiply-Add (FMA)</simpara></listitem>
              <listitem><simpara><command>mSub</command>: Fused Multiply-Sub</simpara></listitem>
              <listitem><simpara><command>cmp</command>: comparison</simpara></listitem>
              <listitem><simpara><command>conv</command>: conversion (or cast)</simpara></listitem>
            </itemizedlist>
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><command>Floating-point precision:</command></term>
        <listitem><para>
            <itemizedlist>
              <listitem><simpara><command>sht</command>: half precision (IEEE-754
              <computeroutput>binary16</computeroutput>)</simpara></listitem>
              <listitem><simpara><command>flt</command>: single precision (C
              <computeroutput>float</computeroutput> / IEEE-754
              <computeroutput>binary32</computeroutput>)</simpara></listitem>
              <listitem><simpara><command>dbl</command>: double precision (C
              <computeroutput>double</computeroutput> / IEEE-754
              <computeroutput>binary64</computeroutput>)</simpara></listitem>
            </itemizedlist>
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><command>Vector nature of the instruction:</command></term>
        <listitem><para>
            <itemizedlist>
              <listitem><simpara><command>scal</command>: scalar instruction</simpara></listitem>
              <listitem><simpara><command>llo</command>: lowest-lane-only (unpacked) instruction
              (<foreignphrase>i.e.</foreignphrase> scalar instruction from the SSE set, such as
              <computeroutput>addss</computeroutput>)</simpara></listitem>
              <listitem><simpara><command>vec</command>: full (packed) vector instruction (such as
              <computeroutput>addps</computeroutput>)</simpara></listitem>
            </itemizedlist>
        </para></listitem>
      </varlistentry>
    </variablelist>

    <para>Below is an example output of Verrou's summary of floating-point
      operations: <screen>
==18913==  ---------------------------------------------------------------------
==18913==  Operation                            Instruction count
==18913==   `- Precision
==18913==       `- Vectorization          Total             Instrumented
==18913==  ---------------------------------------------------------------------
==18913==  add                     7044                     7044          (100%)
==18913==   `- dbl                     7044                     7044      (100%)
==18913==       `- llo                     7044                     7044  (100%)
==18913==  ---------------------------------------------------------------------
==18913==  sub                       21                       21          (100%)
==18913==   `- dbl                       21                       21      (100%)
==18913==       `- llo                       21                       21  (100%)
==18913==  ---------------------------------------------------------------------
==18913==  mul                     7073                     7073          (100%)
==18913==   `- dbl                     7073                     7073      (100%)
==18913==       `- llo                     7073                     7073  (100%)
==18913==  ---------------------------------------------------------------------
==18913==  div                        7                        7          (100%)
==18913==   `- dbl                        7                        7      (100%)
==18913==       `- llo                        7                        7  (100%)
==18913==  ---------------------------------------------------------------------
==18913==  cmp                       78                        0          (  0%)
==18913==   `- dbl                       78                        0      (  0%)
==18913==       `- scal                      78                        0  (  0%)
==18913==  ---------------------------------------------------------------------
==18913==  conv                   14042                        0          (  0%)
==18913==   `- dbl=>int                  28                        0      (  0%)
==18913==       `- scal                      28                        0  (  0%)
==18913==   `- dbl=>sht               14014                        0      (  0%)
==18913==       `- scal                   14014                        0  (  0%)
==18913==  ---------------------------------------------------------------------
==18913== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</screen>
    </para>

    <para>
      The set of columns labeled "Total" shows the total number of floating-point instructions as
      seen by Verrou. In the second set of columns (labeled "Instrumented"), instructions are only
      accounted for if they come from <xref linkend="vr-manual.feat.instr"/>. The last column shows
      the fraction of instrumented instructions.
    </para>

    <para>
      Floating-point instructions counters can be displayed at any point during the program
      execution using the <computeroutput><xref linkend="vr-cr.display-counters"/></computeroutput>
      client request or the <computeroutput><xref linkend="vr.monitor_count"/></computeroutput>
      monitor command. It is also possible to disable this feature using the <option><xref
      linkend="vr-opt.count-op"/>=no</option>.
    </para>
  </section>

  <section id="vr-manual.feat.rounding-mode" xreflabel="Rounding-mode switching">
    <title>Rounding-mode switching</title>
    <para>
      When the instrumented program performs a floating-point operation, Verrou can replace it with
      a perturbed version of the same operation, using another rounding mode. The <option><xref
      linkend="vr-opt.rounding-mode"/></option> command-line option allows choosing between
      different rounding strategies, described hereafter.
    </para>
    <para>
      Verrou can simulate any of the four IEEE-754 standard rounding modes:
      <itemizedlist>
        <listitem><simpara><command>nearest</command> (default),</simpara></listitem>
        <listitem><simpara><command>upward,</command></simpara></listitem>
        <listitem><simpara><command>downward,</command></simpara></listitem>
        <listitem><simpara><command>toward zero,</command></simpara></listitem>
      </itemizedlist>
      as well as three other (non-IEEE-754) deterministic modes:
      <itemizedlist>
        <listitem><para><command>farthest</command>: in this mode, all non-exact results are rounded
        in the opposite way to IEEE-754 nearest rounding mode. This helps producing results that are
        different from <command>nearest</command> rounding mode, while still being
        deterministic.</para></listitem>

	<listitem><para><command>float</command>: in this mode, all double precision floating-point
	operations are replaced by simple precision equivalent. Float operations remain unchanged.
	</para></listitem>

	<listitem><para><command>ftz</command>: in this mode, denormal floating-point operations are flushed to zero.
	</para></listitem>


      </itemizedlist>
    </para>
    <para>
      Finally, the main use for Verrou is to randomly switch rounding mode at each floating-point
      operation, in order to implement the "random rounding" variant of Monte Carlo Arithmetic
      (MCA). Three strategies can be used to choose the rounding mode for a given operation:
      <itemizedlist>
        <listitem><para><command>random:</command> Randomly pick one among upward and downward
        rounding, with equal probabilities. This is a form of asynchronous CESTAC method.</para>
        </listitem>
	<listitem><para><command>prandom:</command> Randomly pick one among upward and downward
            rounding, with probabilities p and 1-p. By default p is selected randomly between 0 and
	    1 with uniform distribution, once by verrou tool initialization. p can be setup with
	    option <option><xref linkend="vr-manual.feat.updatepvalue"/> </option>.
	      p can be dynamically modified with client requests <option><xref linkend="vr-manual.feat.clrupdatepvalue"/></option>
		/
		<option><xref linkend="vr-manual.feat.clrupdatep"/></option>
		  or
		  option <option><xref linkend="vr-manual.feat.updatepfunc"/></option>.
		    This rounding mode is designed to try to get wider distribution (useful for debug).</para>
        </listitem>
        <listitem><para><command>average:</command> Randomly choose between upward and downward
            rounding mode, in such a way that the expectation of the random result equals the exact
            operation result (without rounding). This is called "uniform_absolute output randomization"
            or "SR-nearness" in the MCA literature.</para></listitem>
	<listitem><para><command>random_det:</command> Randomly choose between upward and downward
        rounding mode, with equal probabilities but insuring that, for a given seed, the same computation
        (same inputs and operation) will always be rounded in the same way.
        This is a variant of the <command>random</command> rounding mode that improves determinism and
        removes the need to use <option><xref linkend="vr-manual.feat.deterministic"/></option>.</para>
        </listitem>
	<listitem><para><command>prandom_det:</command> Randomly choose between downward and upward
        rounding mode, with probabilities p and 1-p but insuring that, for a given seed, the same computation
        (same inputs and operation) will always be rounded in the same way.
        This is a variant of the <command>prandom</command> rounding mode that improves determinism and
        removes the need to use <option><xref linkend="vr-manual.feat.deterministic"/></option>.
	If the p is modified dynamically, determinism is no longer assured.
	</para>
        </listitem>
	<listitem><para><command>average_det:</command> Randomly choose between upward and downward
        rounding mode, with the same probabilitie law as <command>average</command> but insuring that, for a given seed, the same computation
        (same inputs and operation) will always be rounded in the same way.
        This is a variant of the <command>average</command> rounding mode that improves determinism and
        removes the need to use <option><xref linkend="vr-manual.feat.deterministic"/></option>.</para>
        </listitem>
	<listitem><para><command>random_comdet:</command> variant of <command>random_det</command>
	    ensuring that <command>x op y</command> and  <command>y op x </command> will be rounded in the same way for commutative op (+,x, fma).</para>
        </listitem>
	<listitem><para><command>prandom_comdet:</command> variant of <command>prandom_det</command>
	    ensuring that <command>x op y</command> and  <command>y op x </command> will be rounded in the same way for commutative op (+,x, fma).</para>
        </listitem>
	<listitem><para><command>average_comdet:</command> variant of <command>average_det</command>
	    ensuring that <command>x op y</command> and  <command>y op x </command> will be rounded in the same way for commutative op (+,x, fma).</para>
        </listitem>

	<listitem><para><command>random_scomdet:</command> variant of <command>random_det</command>
	    ensuring that <command>x op y</command> and  <command>y op x</command> will be rounded in the same way for commutative op (+,x, fma) and the following constraints :
	    <itemizedlist>
	      <listitem> (-x)+(-y) == -(x+y) </listitem>
	      <listitem> x+(-y) == -((-x)+y) </listitem>
	      <listitem> x-y == x+(-y) </listitem>
	      <listitem> (-x)*(-y) == (x*y) </listitem>
	      <listitem> (-x)*y == -(x*y) </listitem>
	      <listitem> (-x)/(-y) == (x/y) </listitem>
	      <listitem> (-x)/y == -(x/y) </listitem>
	      <listitem> x/(-y) == -(x/y) </listitem>
	      <listitem> fma(x,y,z) == fma(-x,-y,z)</listitem>
	      <listitem> fma(-x,y,-z) == -fma(x,y,z)</listitem>
	      <listitem> fma(x,-y,-z) == -fma(x,y,z)</listitem>
	      <listitem> cast(-x) == -cast(x)</listitem>
	    </itemizedlist>
	  </para>
        </listitem>

	<listitem><para><command>average_scomdet:</command> variant of <command>average_det</command> which respects the same constraints as <command>random_scomdet</command></para> 
        </listitem>

	<listitem><para><command>sr_monotonic:</command>  Choose between downward and upward
            rounding mode, with a fixed limit. This limit is randomly selected for each interval between 2 successive floating point numbers. This rounding mode satisfy the monotonicity of the rounding and respect also all the <command>random_scomdet</command> constraints as the limits are designed to be symetric.
	  </para>
        </listitem>


      </itemizedlist>
      A pseudo-Random Number Generator (pRNG) is used to generate the randomness used in the
      modes <command>average</command> and <command>random</command>. The pRNG is normally seeded with a value that changes at each execution in order to
      produce different "random rounding" results at each run. In order to reproduce results from a
      given run, it is however possible to use the <option><xref linkend="vr-opt.seed"/></option>
      command-line option. For the modes <command>average_[[s]com]det</command> and <command>random_[[s]com]det</command>, the pRNG seed is used as a parameter of hash functions.


    </para>
  </section>
</section>



<!-- Local Variables: -->
<!-- mode: nxml -->
<!-- fill-column: 100 -->
<!-- End: -->
