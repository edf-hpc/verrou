<?xml version="1.0"?> <!-- -*- sgml -*- -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<section id="vr-manual.feat.scope"
         xreflabel="Restriction of the perturbations scope">
  <title>Restriction of the perturbations scope</title>

  <para>
    There is a number of reasons why it could be desirable to only perturb parts of a program:
    <itemizedlist>
      <listitem><para>when an algorithm is designed to work only in standard "rounding to nearest"
      mode, such as the <literal>libm</literal> example described in the <link
      linkend="vr-manual.overview.scope">overview</link>; </para></listitem>
      <listitem><para>to save time by avoiding costly perturbations in places which are known to be
      particularly stable; </para></listitem>
      <listitem><para>to help locating the origin of numerical instabilities by studying the overall
      impact of localized perturbation; see the <xref linkend="vr-manual.localization.dd"/> section
      for an instability localization method that build upon this idea.</para>
      </listitem>
    </itemizedlist>

    Controlling which parts of the program are perturbed can be performed in one of two ways,
    described hereafter.
  </para>

  <section id="vr-manual.feat.exclude" xreflabel="Excluded symbols">
    <title>Excluded symbols</title>
    <para>
      A first way to restrict the scope of instrumentation is based on either the function (or
      rather symbol) name, the object (library) name, or both.
    </para>

    <section>
      <title>Exclusion files</title>
      <para>
        This can be done by providing an exclusion file via the <option><xref
        linkend="vr-opt.exclude"/></option> command-line option. The file should follow the
        following format:
        <itemizedlist>
          <listitem><para>one rule per line;</para></listitem>
          <listitem>
            <para>each rule of the form <computeroutput>FNNAME OBJNAME</computeroutput>, where
            <computeroutput>FNNAME</computeroutput> is the function name, and
            <computeroutput>OBJNAME</computeroutput> is the symbol name (the name of the executable
            or the shared library). Either can be replaced by a star
            (<computeroutput>*</computeroutput>) to match anything. The two columns can be separated
            by any number of spaces and tabulations (<computeroutput>\t</computeroutput>);</para>
          </listitem>
          <listitem><simpara>each line beginning with a hash (<computeroutput>#</computeroutput>) is
          considered as a comment and disregarded.</simpara></listitem>
        </itemizedlist>
      </para>

      <para>
        When verrou finds a block of instructions (an IRSB, Intermediate Representation SuperBlock
        in valgrind terminology) whose address matches the
        <computeroutput>FNNAME</computeroutput>/<computeroutput>OBJNAME</computeroutput>
        specification, the whole chunk is left uninstrumented.
      </para>

      <warning>
        <para>
          The library name listed in the second column of an exclusion file must be identified by a
          fully canonical path, as produced by <command>readlink -f</command>.
        </para>
      </warning>

      <para>A recommanded procedure to find the correct library path is the following: <screen>
<prompt>$</prompt> ldd <replaceable>program</replaceable>
        linux-vdso.so.1 (0x00007fffebbc6000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fdbe1760000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fdbe155c000)
        libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007fdbe1358000)
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fdbe113d000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fdbe0e38000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdbe0a96000)
        /lib64/ld-linux-x86-64.so.2 (0x000055ba64113000)

<prompt>$</prompt> readlink -f <replaceable>/lib/x86_64-linux-gnu/libm.so.6</replaceable>
/lib/x86_64-linux-gnu/libm-2.23.so </screen>
      </para>

      <para>
        Here are a few examples of exclusion rules for mathematics functions:
        <itemizedlist>
          <listitem>
            <para>
              exclude the whole <computeroutput>libm</computeroutput>:
              <screen>
#FNNAME   OBJNAME
*         /lib/x86_64-linux-gnu/libm-2.23.so</screen>
            </para>
          </listitem>
          <listitem>
            <para>
              exclude specific functions based on their names only (beware to list all functions in
              which the program will pass; not only top-level ones):<screen>
#FNNAME        OBJNAME
exp            *
__ieee754_exp  *
__exp1         *</screen>
            </para>
          </listitem>
          <listitem>
            <para>
              exclude a specific function of a specific library: <screen>
#FNNAME  OBJNAME
exp      /lib/x86_64-linux-gnu/libm-2.23.so</screen>
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>

    <section>
      <title>Automatic generation of exclusion lists</title>
      <para>
        Instead of manually establishing an exclusion list, using the <option><xref
        linkend="vr-opt.gen-exclude"/></option> command-line option can help producing the complete
        list of <computeroutput>FNNAME</computeroutput>/<computeroutput>OBJNAME</computeroutput>
        pairs through which a given program passes. This complete list can then be filtered to keep
        only functions which really need to be excluded.
      </para>

      <para>For example:<screen>
<prompt>$</prompt> valgrind --tool=verrou --gen-exclude=all.tex python3
==10469== Verrou, Check floating-point rounding errors
==10469== Copyright (C) 2014-2019, EDF (F. Fevotte &amp; B. Lathuiliere). 2019-2021, EDF (B. Lathuiliere). 2020-2021, TriScale innov (F. Fevotte)
==10469==
==10469== Using Valgrind-3.19.0.+Verrou-Dev and LibVEX; rerun with -h for copyright info
==10469== Command: python3
==10469==
==10469== First seed : 147635
==10469== Backend verrou : 1.x-dev
==10469== Backend mcaquad : 1.x-dev
==10469== Backend checkcancellation : 1.x-dev
==10469== Backend check_float_max : 1.x-dev
==10469== Backend checkdenorm : 1.x-dev
==10469== Instrumented operations :
==10469== 	add : yes
==10469== 	sub : yes
==10469== 	mul : yes
==10469== 	div : yes
==10469== 	mAdd : yes
==10469== 	mSub : yes
==10469== 	cmp : no
==10469== 	conv : yes
==10469== 	max : no
==10469== 	min : no
==10469== Instrumented vectorized operations :
==10469== 	scal : no
==10469== 	llo  : yes
==10469== 	vec2  : yes
==10469== 	vec4  : yes
==10469== 	vec8  : yes
==10469== 	unk  : yes
==10469== Instrumented type :
==10469== 	flt : yes
==10469== 	dbl : yes
==10469== Backend verrou simulating NEAREST rounding mode
Python 3.7.3 (default, Oct 31 2022, 14:04:00)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
<prompt>>>></prompt> import math
<prompt>>>></prompt> math.cos(42.)
-0.39998531498835127
<prompt>>>></prompt> exit()
==10469==
==10469==  ---------------------------------------------------------------------
==10469==  Operation                            Instruction count
==10469==   `- Precision
==10469==       `- Vectorization          Total             Instrumented
==10469==  ---------------------------------------------------------------------
==10469==  add                      519                      519          (100%)
==10469==   `- dbl                      519                      519      (100%)
==10469==       `- llo                      519                      519  (100%)
==10469==  ---------------------------------------------------------------------
==10469==  sub                        8                        8          (100%)
==10469==   `- dbl                        8                        8      (100%)
==10469==       `- llo                        8                        8  (100%)
==10469==  ---------------------------------------------------------------------
==10469==  mul                      520                      520          (100%)
==10469==   `- dbl                      520                      520      (100%)
==10469==       `- llo                      520                      520  (100%)
==10469==  ---------------------------------------------------------------------
==10469==  div                        2                        2          (100%)
==10469==   `- dbl                        2                        2      (100%)
==10469==       `- llo                        2                        2  (100%)
==10469==  ---------------------------------------------------------------------
==10469==  mAdd                      15                       15          (100%)
==10469==   `- dbl                       15                       15      (100%)
==10469==  ---------------------------------------------------------------------
==10469==  cmp                      204                        0          (  0%)
==10469==   `- dbl                      204                        0      (  0%)
==10469==       `- scal                     204                        0  (  0%)
==10469==  ---------------------------------------------------------------------
==10469==  conv                      33                        0          (  0%)
==10469==   `- dbl=>int                  32                        0      (  0%)
==10469==       `- scal                      32                        0  (  0%)
==10469==   `- dbl=>sht                   1                        0      (  0%)
==10469==       `- scal                       1                        0  (  0%)
==10469==  ---------------------------------------------------------------------
==10469==  min                        1                        0          (  0%)
==10469==   `- dbl                        1                        0      (  0%)
==10469==       `- llo                        1                        0  (  0%)
==10469==  ---------------------------------------------------------------------
==10469== Dumping exclusions list to `/home/E52654/srcVerrou/valgrind-3.19.0-verrou/all.tex'... OK.
==10469== For lists of detected and suppressed errors, rerun with: -s
==10469== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
</screen>
<screen>
  <prompt>$</prompt> cat all.tex |grep libm |tee libm.ex
__cos_fma	/usr/lib/x86_64-linux-gnu/libm-2.28.so
</screen>
      </para>

      <note>
        <title>Note on C++ and symbol name mangling</title>
        <para> The exclusion lists (generation and exclusion) use the mangled form.
	When analyzing C++ programs, symbol names in
        the exclusion list can still be demangled using an external program
        such as <computeroutput>c++filt</computeroutput>.
        </para>
      </note>
    </section>

    <section id="vr-manual.feat.source" xreflabel="Source code lines selection">
      <title>Source code lines selection</title>
      <para>
        A more fine-grained way to restrict the scope of instrumentation is based on source code
        lines. In order to effectively use this feature, the instrumented binary file must embed
        debugging information (i.e. it must have been compiled with the
        <computeroutput>-g</computeroutput> switch or something equivalent).
      </para>
      <para>
        This can be done by providing a list of source code lines to instrument, via the
        <option><xref linkend="vr-opt.source"/></option> command-line option. The file should have
        the following format:
        <itemizedlist>
          <listitem><para>one item per line,</para></listitem>
          <listitem>
            <para>each item of the form <computeroutput>FILENAME LINENUM [SYMNAME]</computeroutput>,
            where <computeroutput>FILENAME</computeroutput> is the source file name (not path!),
            <computeroutput>LINENUM</computeroutput> is the line number within the source file, and
            <computeroutput>SYMNAME</computeroutput> is optional and indicates the symbol name in
            which the source code has been compiled. The columns can be separated by any number of
            spaces and tabulations (<computeroutput>\t</computeroutput>).</para>
          </listitem>
        </itemizedlist>

        Here is an example of a sources list file:<screen>
#FILENAME       LINENUM  SYMNAME
s_sin.c         594      __cos_avx
s_sin.c         598      __cos_avx
fenv_private.h  433      __cos_avx
s_sin.c         581      __cos_avx
e_asin.c        10       __acos_finite
s_sin.c         12       cos</screen>
      </para>
      <para>
        When verrou finds an instruction coming from a listed source code line, it instruments
        it. Only the source file name and line number are considered during this selection. If the
        <option><xref linkend="vr-opt.source"/></option> option is not specified all instructions
	are instrumented. If the file is empty, nothing is instrumented (contrary to the first verrou
	versions).
      </para>
      <para>
        The <option><xref linkend="vr-opt.gen-source"/></option> command-line switch can help
        generate the list of all source code lines encountered during program execution, for later
        filtering. It can be wise to combine it with the <option><xref
        linkend="vr-opt.exclude"/></option> switch in order to restrict the source code lines list
        to a specific set of symbols.
      </para>
      <note>
        <para>This fine-grained selection of code parts to instrument is primarily meant to be used
        by automatic debugging tools (see <xref linkend="vr-manual.localization.dd"/>), not directly
        by humans.</para>
      </note>
    </section>
  </section>


  <section id="vr-manual.feat.instr" xreflabel="Instrumented sections">
    <title>Instrumented sections</title>
    <para>
      Another way of controlling the scope of perturbations consists in toggling instrumentation on
      and off during program execution.
    </para>
    <para>
      Instrumentation can be toggled off at program start using the <option><xref
      linkend="vr-opt.instr-atstart"/></option> command-line option. Furthermore, it can be
      (de)activated programatically using the <computeroutput><xref
      linkend="vr-cr.start-instrumentation"/></computeroutput> and <computeroutput><xref
      linkend="vr-cr.stop-instrumentation"/></computeroutput> client requests. This feature is
      greatly inspired by Callgrind (see <xref linkend="cl-manual.limits"/> in the Callgrind
      manual). Below is an example use:
    <programlisting>
#include &lt;valgrind/verrou.h&gt;
#include &lt;stdio.h&gt;

float compute ();

int main () {
  VERROU_START_INSTRUMENTATION;
  float result = compute();
  VERROU_STOP_INSTRUMENTATION;

  fprintf (stdout, "result = %f", result);
} </programlisting>

    This program should be run in Verrou using the following command:
    <screen>valgrind --tool=verrou --instr-atstart=no <replaceable>program</replaceable></screen>
    </para>
    <para>
      The same thing can be achieved interactively (and without the need for a recompilation of the
      program) using the <computeroutput><xref
      linkend="vr.monitor_instrumentation"/></computeroutput> monitor command.
    </para>

  </section>
</section>

<!-- Local Variables: -->
<!-- mode: nxml -->
<!-- fill-column: 100 -->
<!-- End: -->
